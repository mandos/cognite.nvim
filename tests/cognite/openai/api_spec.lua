local log = require("cognite.log")
local assert = require("luassert")
local api = require("cognite.openai.api")
local partial = require("plenary.functional").partial
local t = require("cognite.openai.types")

describe("generateRequest", function()
	it("should return a OpenAIRequest", function()
		local t = require("cognite.openai.types")
		-- local request = api._internal.generateRequest("My question to AI")
		-- assert.is_table(request)
	end)
end)

describe("askAI", function()
	it("should return a OpenAIResponse", function()
		-- local response = api.askAI("My question to AI")
		-- assert.is_string(response)
		-- assert.is_table(response)
	end)
end)

describe("intrnal", function()
	describe("generateMessage", function()
		local generateMessage = api._internal.generateMessage
		it("should return a OpenAIMessage", function()
			local t = require("cognite.openai.types")
			local message = generateMessage("user", "My question to AI")
			assert.is_table(message)
			assert.is_string(message.__raw.role)
			assert.is_string(message.__raw.content)
			assert.are.same(message.__raw.role, "user")
			assert.are.same(message.__raw.content, "My question to AI")
		end)

		it("should should throw error if role is incorrect", function()
			assert.has_error(function()
				generateMessage("incorrect", "My question to AI")
			end)
		end)
	end)

	describe("generateRequest", function()
		local generateRequest = partial(api._internal.generateRequest, { model = "davinci" })
		it("should return return a correct OpenAIRequest", function()
			local m1 = t.Message({ role = "user", content = "My question to AI" })
			local m2 = t.Message({ role = "assistant", content = "My answer to you" })
			local request = generateRequest({ m1, m2 })
			-- log.debug("request:", request._fields)
			assert.are_same(2, #request.messages)
			assert.are_same("user", request.messages[1].role)
			assert.are_same("assistant", request.messages[2].role)
		end)
	end)
end)
